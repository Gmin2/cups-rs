use cups_rs::*;

fn main() -> Result<()> {
    let (file_path, cleanup_file) = match std::env::args().nth(1) {
        Some(path) => {
            if !std::path::Path::new(&path).exists() {
                eprintln!(" File not found: {}", path);
                std::process::exit(1);
            }
            println!("Using provided file: {}", path);
            (path, false)
        }
        None => {
            println!(" No file provided, creating test document...");
            let content = format!(
                "CUPS Rust Library Test Document\n\
                 This is a test document generated by the CUPS Rust library.\n\
                 Generated at: {}\n\n\
                 .\n",
                chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")
            );

            std::fs::write("rust_cups_test.txt", content)?;
            println!("Created test file: rust_cups_test.txt");
            ("rust_cups_test.txt".to_string(), true)
        }
    };

    let printer_name = std::env::args().nth(2).unwrap_or_else(|| {
        println!(" No printer specified, using default PDF printer");
        "PDF".to_string()
    });

    println!(" Target printer: {}", printer_name);

    let destinations = get_all_destinations()?;
    if destinations.is_empty() {
        println!("No printers found. Please add a printer first.");
        return Ok(());
    }

    let destination = get_destination(&printer_name)?;
    println!("Found printer: {}", destination.full_name());
    println!("   State: {}", destination.state());
    println!("   Accepting jobs: {}", destination.is_accepting_jobs());

    if let Some(info) = destination.info() {
        println!("   Description: {}", info);
    }
    if let Some(location) = destination.location() {
        println!("   Location: {}", location);
    }

    if !destination.is_accepting_jobs() {
        println!("⚠️  Warning: Printer is not accepting jobs, but proceeding anyway...");
    }

    let job_title = format!(
        "Rust CUPS: {}",
        std::path::Path::new(&file_path)
            .file_name()
            .and_then(|n| n.to_str())
            .unwrap_or("document")
    );

    println!("\n Creating print job...");
    let job = create_job(&destination, &job_title)?;
    println!("Created job ID: {}", job.id);

    let format = if file_path.ends_with(".pdf") {
        println!("Detected format: PDF");
        FORMAT_PDF
    } else if file_path.ends_with(".txt") {
        println!("Detected format: Plain text");
        FORMAT_TEXT
    } else if file_path.ends_with(".jpg") || file_path.ends_with(".jpeg") {
        println!("Detected format: JPEG image");
        FORMAT_JPEG
    } else {
        println!("Unknown format, treating as plain text");
        FORMAT_TEXT
    };

    job.submit_file(&file_path, format)?;
    println!(" Document submitted successfully!");

    println!("Print job completed! {:?}", job);

    println!(" Verification options:");
    println!("   1. Check job queue: lpstat -o");
    println!("   2. View jobs in browser: http://localhost:631/jobs");

    if cleanup_file {
        std::fs::remove_file(&file_path).ok();
        println!(" Cleaned up test file");
    }

    Ok(())
}
